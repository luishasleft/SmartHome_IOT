// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartHome.Data;

#nullable disable

namespace SmartHome.Migrations
{
    [DbContext(typeof(HomeDbContext))]
    partial class HomeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("SmartHome.Models.Entities.Allarme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataCreazione")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Messaggio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Risolto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("SensoreId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SensoreId");

                    b.ToTable("Allarmi");
                });

            modelBuilder.Entity("SmartHome.Models.Entities.Evento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SensoreId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Valore")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SensoreId");

                    b.ToTable("Eventi");
                });

            modelBuilder.Entity("SmartHome.Models.Entities.Sensore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Attivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("DataLettura")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Valore")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Sensori");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Attivo = true,
                            DataLettura = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Temperatura Salotto",
                            Tipo = "Temperatura"
                        },
                        new
                        {
                            Id = 2,
                            Attivo = true,
                            DataLettura = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Movimento Ingresso",
                            Tipo = "Movimento"
                        },
                        new
                        {
                            Id = 3,
                            Attivo = true,
                            DataLettura = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Luce RGB Camera",
                            Tipo = "LuceRGB"
                        },
                        new
                        {
                            Id = 4,
                            Attivo = true,
                            DataLettura = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Ventola Cucina",
                            Tipo = "Ventola"
                        },
                        new
                        {
                            Id = 5,
                            Attivo = true,
                            DataLettura = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Buzzer Sistema",
                            Tipo = "Buzzer"
                        },
                        new
                        {
                            Id = 6,
                            Attivo = true,
                            DataLettura = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Badge Principale",
                            Tipo = "Badge"
                        });
                });

            modelBuilder.Entity("SmartHome.Models.Entities.Allarme", b =>
                {
                    b.HasOne("SmartHome.Models.Entities.Sensore", "Sensore")
                        .WithMany("Allarmi")
                        .HasForeignKey("SensoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensore");
                });

            modelBuilder.Entity("SmartHome.Models.Entities.Evento", b =>
                {
                    b.HasOne("SmartHome.Models.Entities.Sensore", "Sensore")
                        .WithMany("Eventi")
                        .HasForeignKey("SensoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensore");
                });

            modelBuilder.Entity("SmartHome.Models.Entities.Sensore", b =>
                {
                    b.Navigation("Allarmi");

                    b.Navigation("Eventi");
                });
#pragma warning restore 612, 618
        }
    }
}
